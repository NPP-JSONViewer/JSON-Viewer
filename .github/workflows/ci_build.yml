name: Build and Test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  BUILD_DIR: src\Build\Bin
  MSBUILD_TOOLSET: v143
  ARTIFACT_PREFIX: NppJSONViewer_

jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        build_configuration: [Release, Debug]
        build_platform: [Win32, x64, ARM64]

    steps:
      # Step 1: Check out the code from the repo
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Step 2: Prepare for build
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
      
      # Step 3: Build projects and unit test
      - name: Build code
        working-directory: src
        run: msbuild NppJSONViewer.sln /m /p:configuration="${{matrix.build_configuration}}" /p:platform="${{matrix.build_platform}}" /p:PlatformToolset=${{env.MSBUILD_TOOLSET}}

      # Step 4: Upload build binary artifacts for deployment
      - name: Archive binaries artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.ARTIFACT_PREFIX}}${{matrix.build_platform}}_${{matrix.build_configuration}}
          path: ${{env.BUILD_DIR }}\${{matrix.build_configuration}}\${{matrix.build_platform}}\NPPJSONViewer.dll

      # Step 5: Upload build pdb artifacts
      - name: Archive symbols artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.ARTIFACT_PREFIX}}${{matrix.build_platform}}_${{matrix.build_configuration}}_pdb
          path: ${{env.BUILD_DIR }}\${{matrix.build_configuration}}\${{matrix.build_platform}}\NPPJSONViewer.pdb

      # Step 6: Run unit tests for x86 and x64
      - name: Run unit tests
        if: matrix.build_platform == 'Win32' || matrix.build_platform == 'x64'
        run: |
          cd ${{env.BUILD_DIR}}\${{matrix.build_configuration}}\${{matrix.build_platform}}
          ./UnitTest.exe

  upload-full-artifacts:
    # Trigger this job only after all 'build' jobs are complete
    needs: build
    runs-on: windows-latest
    strategy:
      fail-fast: true

    steps:
      # Step 7: Download all artifacts from the build job
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ${{env.ARTIFACT_PREFIX}}*
          path: all_artifacts\

      # Step 8: Upload consolidated artifacts as a single artifact
      - name: Upload full artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.ARTIFACT_PREFIX}}ALL
          path: all_artifacts\**
